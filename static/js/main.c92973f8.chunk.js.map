{"version":3,"sources":["components/Child.js","components/Parent.js","App.js","serviceWorker.js","index.js"],"names":["Child","_ref","open","list","onClose","console","log","_useState","useState","_useState2","Object","slicedToArray","childList","setChildList","useEffect","length","toConsumableArray","react_default","a","createElement","react","map","item","key","id","type","value","name","onChange","e","listItem","newName","currentTarget","newList","handleInputChange","onClick","initialList","Parent","props","setList","_useState3","_useState4","childOpen","setChildOpen","components_Child","App","className","components_Parent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c92973f8.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { map } from 'ramda'\n\nconst Child = ({ open, list, onClose }) => {\n\tconsole.log('Child...')\n\tconst [childList, setChildList] = useState([])\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (list && list.length) {\n\t\t\t\tsetChildList([...list])\n\t\t\t}\n\t\t},\n\t\t[list],\n\t)\n\n\tconst handleInputChange = (e, listItem) => {\n\t\tlet newName = e.currentTarget.value\n\n\t\tconst newList = map(item => {\n\t\t\tif (item.id === listItem.id) {\n\t\t\t\titem.name = newName\n\t\t\t}\n\n\t\t\treturn item\n\t\t}, childList)\n\n\t\tsetChildList(newList)\n\t}\n\tif (!open) {\n\t\treturn <Fragment />\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<h3>Child list to edit</h3>\n\t\t\t<p>Edit some values and click cancel.</p>\n\t\t\t<p>The values you have changed should not be reflected in the parent but they are :(</p>\n\t\t\t{childList.map(item => (\n\t\t\t\t<div key={item.id}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={item.name}\n\t\t\t\t\t\tonChange={e => handleInputChange(e, item)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t\t<hr />\n\t\t\t<button onClick={onClose}>Cancel & close child</button>\n\t\t</Fragment>\n\t)\n}\n\nChild.propTypes = {\n\topen: PropTypes.bool,\n\tlist: PropTypes.array,\n\tonClose: PropTypes.func,\n}\n\nexport default Child\n","import React, { Fragment, useState, useEffect } from 'react'\nimport Child from './Child'\n\nconst initialList = [\n\t{\n\t\tid: '1',\n\t\tname: 'First',\n\t},\n\t{\n\t\tid: '2',\n\t\tname: 'Second',\n\t},\n]\n\nconst Parent = props => {\n\tconsole.log('Parent...')\n\tconst [list, setList] = useState([])\n\tconst [childOpen, setChildOpen] = useState(false)\n\n\tuseEffect(() => {\n\t\tsetList(initialList)\n\t}, [])\n\n\tconst onClose = () => {\n\t\tsetChildOpen(false)\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<h1>The problem</h1>\n\t\t\t<p>I have two component (Parent and Child), the parent is using local state for \"list\", which is being passed down to the child as a prop.</p>\n\t\t\t<p>The child then takes that prop and creates a local state of it's own from that list to edit it.</p>\n\t\t\t<p>The child has an inputHandler to edit the list's values within it's own local state.</p>\n\t\t\t<p>The child also has a prop for onClose which is triggered from the parent.</p>\n\t\t\t<p>As soon as the onClose is triggered from the parent, the parent list is being updated with the values from the child state, which is not what I expected as the child's state is totally separate.</p>\n\t\t\t<p>Any ideas?</p>\n\t\t\t<hr />\n\t\t\t<h2>Parent list</h2>\n\t\t\t{list.map(item => <div key={item.id}>{item.name}</div>)}\n\t\t\t<hr />\n\t\t\t<button onClick={() => setChildOpen(true)}>Open child</button>\n\t\t\t<hr />\n\t\t\t<Child\n\t\t\t\topen={childOpen}\n\t\t\t\tlist={list}\n\t\t\t\tonClose={onClose}\n\t\t\t/>\n\t\t</Fragment>\n\t)\n}\n\nexport default Parent\n","import React, { Component } from 'react';\nimport './App.css';\nimport Parent from './components/Parent'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Parent></Parent>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}